;; -- DO NOT REMOVE ----------------------------------------------------------
;; !: arch: tms320c64xx
;; !: sarc: all
;; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;; !: codepage: cp866
;; !: d: Модуль содержит низкоуровневый код менеджера прерываний.
;; !: -:
;; ---------------------------------------------------------------------------

; -- Defines -----------------------------------------------------------------

        .asg            b15, sp

; -- Import external symbols -------------------------------------------------

        .global         _v_os_irctx_nmi
        .global         _v_os_irctx
        .global         _OS_ISTACK_END
        .global         _OS_NMISTACK_END
        .global         _v_os_interrupt_vector_01_NMI

; -- Extern local symbols ----------------------------------------------------

        .def            _os_interrupt_enable_ll__FUi
        .def            _os_interrupt_disable_ll__Fv
        .def            _os_interrupt_lock_ll__FUi
        .def            _os_interrupt_unlock_ll__FUi
        .def            _os_interrupt_null_vector_ll__Fv
        .def            _os_interrupt_nmi_trigger_ll__Fv
        .def            _os_interrupt_trigger_ll__Fv
        .def            _os_interrupt_clear_ll__FUi
        .def            _os_interrupt_set_ll__FUi

        .sect           ".text"

;-----------------------------------------------------------------------------
;; !: fn: void os_interrupt_null_vector_ll()
;; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;; !: d: <b>Описание:</b><br>
;; !: d: <br>
;; !: d: Функция пустого обработчика прерываний. Устанавливается автоматически
;; !: d: по старту операционной системы для всех прерваний и при освобождении
;; !: d: вектора прерываний пользователем.<br>
;; !: d: <br>
;; !: d: <b>Время выполнения:</b><br>
;; !: d: <br>
;; !: d: 5 тактов
;-----------------------------------------------------------------------------
_os_interrupt_null_vector_ll__Fv:

        b       .s2     b3                                              ; 0  0
        nop             1                                               ; 0  1
        nop             1                                               ; 0  2
        nop             1                                               ; 0  3
        nop             1                                               ; 0  4
        nop             1                                               ; 0  5
        nop             1                                               ; 0  6
        nop             1                                               ; 0  7

;-----------------------------------------------------------------------------
;; !: fn: void os_interrupt_nmi_trigger_ll()
;; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;; !: d: <b>Описание:</b><br>
;; !: d: <br>
;; !: d: Функция выполняет сохранение контекста текущего процесса или
;; !: d: прерывания, загрузку контекста для немаскируемого прерывания и вызов
;; !: d: обработчика. Это системная функция и она не доступна пользователю.<br>
;; !: d: <br>
;; !: d: <b>Время выполнения:</b><br>
;; !: d: <br>
;; !: d: 64 такта (без учета обработчика прерываний)
;-----------------------------------------------------------------------------
_os_interrupt_nmi_trigger_ll__Fv:

        ; Load register context pointer into a0 and b0
        addk    .s2     -8, sp                                          ; 0  0
        stdw    .d2     a1:a0, *sp--[1]                                 ; 0  1
     || mvkl    .s1     _v_os_irctx_nmi, a0                             ; 0  2
        stdw    .d2     b1:b0, *sp--[1]                                 ; 0  3
     || mvkh    .s1     _v_os_irctx_nmi, a0                             ; 0  4
        add     .l2     a0, 8, b0                                       ; 0  5
     || add     .s2     a0, 8, b1                                       ; 0  6
     || nop             1                                               ; 0  7

        ; Store a0-a31, b0-b31 and AMR registers
        stdw    .d1     a3:a2, *++a0[2]                                 ; 1  0
     || stdw    .d2     b3:b2, *++b0[2]                                 ; 1  1
        stdw    .d1     a5:a4, *++a0[2]                                 ; 1  2
     || stdw    .d2     b5:b4, *++b0[2]                                 ; 1  3
     || add     .l1     b1, 0, a2                                       ; 1  4
     || add     .l2     b1, 0, b2                                       ; 1  5
        stdw    .d1     a7:a6, *++a2[5]                                 ; 1  6
     || stdw    .d2     b7:b6, *++b2[6]                                 ; 1  7

        stdw    .d1     a9:a8, *++a2[2]                                 ; 2  0
     || stdw    .d2     b9:b8, *++b2[2]                                 ; 2  1
     || add     .l1     sp, 0, a3                                       ; 2  2
     || add     .l2     sp, 0, b3                                       ; 2  3
        lddw    .d1     *+a3[2], a1:a0                                  ; 2  4
     || nop             1                                               ; 2  7
        lddw    .d2     *+b3[1], b1:b0                                  ; 2  5
     || addk    .s2     16, sp                                          ; 2  6

        stdw    .d1     a11:a10, *++a2[2]                               ; 3  0
     || stdw    .d2     b11:b10, *++b2[2]                               ; 3  1
     || add     .l1     b1, -8, a3                                      ; 3  2
     || add     .l2     b1, 0, b3                                       ; 3  3
        stdw    .d1     a13:a12, *++a2[2]                               ; 3  4
     || stdw    .d2     b13:b12, *++b2[2]                               ; 3  5
        stdw    .d1     a15:a14, *++a2[2]                               ; 3  6
     || stdw    .d2     b15:b14, *++b2[2]                               ; 3  7

        stdw    .d1     a17:a16, *++a2[2]                               ; 4  0
     || stdw    .d2     b17:b16, *++b2[2]                               ; 4  1
        stdw    .d1     a1:a0, *+a3[0]                                  ; 4  2
     || stdw    .d2     b1:b0, *+b3[0]                                  ; 4  3
        stdw    .d1     a19:a18, *++a2[2]                               ; 4  4
     || stdw    .d2     b19:b18, *++b2[2]                               ; 4  5
     || addk    .s1     256, a3                                         ; 4  6
     || mvc     .s2     amr, b0                                         ; 4  7

        stdw    .d1     a21:a20, *++a2[2]                               ; 5  0
     || stdw    .d2     b21:b20, *++b2[2]                               ; 5  1
     || mvkl    .s1     0, a8                                           ; 5  2
     || mvkl    .s2     _OS_NMISTACK_END, b15                           ; 5  3
        stdw    .d1     a23:a22, *++a2[2]                               ; 5  4
     || stdw    .d2     b23:b22, *++b2[2]                               ; 5  5
     || mvkh    .s1     0, a8                                           ; 5  6
     || mvkh    .s2     _OS_NMISTACK_END, b15                           ; 5  7

        stdw    .d1     a25:a24, *++a2[2]                               ; 6  0
     || stdw    .d2     b25:b24, *++b2[2]                               ; 6  1
     || mvc     .s2     a8, amr                                         ; 6  2
     || nop             1                                               ; 6  3
        stdw    .d1     a27:a26, *++a2[2]                               ; 6  4
     || stdw    .d2     b27:b26, *++b2[2]                               ; 6  5
     || mvkl    .s2     _v_os_interrupt_vector_01_NMI, b3               ; 6  6
     || nop             1                                               ; 6  7

        stdw    .d1     a29:a28, *++a2[2]                               ; 7  0
     || stdw    .d2     b29:b28, *++b2[2]                               ; 7  1
     || mvkh    .s2     _v_os_interrupt_vector_01_NMI, b3               ; 7  2
     || nop             1                                               ; 7  3
        stdw    .d1     a31:a30, *++a2[2]                               ; 7  4
     || stdw    .d2     b31:b30, *++b2[2]                               ; 7  5
        stw     .d1     b0, *+a3[0]                                     ; 7  6
     || sub     .d2     b15, 8, b15                                     ; 7  7

        ; Call interrupt 01(nmi) handler
        ldw     .d2     *b3, b3                                         ; 8  0
        nop             4                                               ; 8  1
        b       .s2     b3                                              ; 8  2
        addkpc  .s2     rl0_01_nmi, b3, 0                               ; 8  3
        nop             1                                               ; 8  4
        nop             1                                               ; 8  5
        nop             1                                               ; 8  6
        nop             1                                               ; 8  7

rl0_01_nmi:
        
        ; Load register context pointer into a0 and b0
        mvkl    .s1     _v_os_irctx_nmi, a0                             ; 9  0
     || mvkl    .s2     _v_os_irctx_nmi, b0                             ; 9  1
        mvkh    .s1     _v_os_irctx_nmi, a0                             ; 9  2
     || mvkh    .s2     _v_os_irctx_nmi, b0                             ; 9  3
        addk    .s1     240, a0                                         ; 9  4
     || addk    .s2     248, b0                                         ; 9  5
     || nop             1                                               ; 9  6
     || nop             1                                               ; 9  7

        ldw     .d2     *+b0[2], b16                                    ; 10 0
     || nop             1                                               ; 10 1
        lddw    .d1     *a0--[2], a31:a30                               ; 10 2
     || lddw    .d2     *b0--[2], b31:b30                               ; 10 3
        lddw    .d1     *a0--[2], a29:a28                               ; 10 4
     || lddw    .d2     *b0--[2], b29:b28                               ; 10 5
        lddw    .d1     *a0--[2], a27:a26                               ; 10 6
     || lddw    .d2     *b0--[2], b27:b26                               ; 10 7

        lddw    .d1     *a0--[2], a25:a24                               ; 11 0
     || lddw    .d2     *b0--[2], b25:b24                               ; 11 1
        lddw    .d1     *a0--[2], a23:a22                               ; 11 2
     || lddw    .d2     *b0--[2], b23:b22                               ; 11 3
     || mvc     .s2     b16, amr                                        ; 11 4
     || nop             1                                               ; 11 5
        lddw    .d1     *a0--[2], a21:a20                               ; 11 6
     || lddw    .d2     *b0--[2], b21:b20                               ; 11 7

        lddw    .d1     *a0--[2], a19:a18                               ; 12 0
     || lddw    .d2     *b0--[2], b19:b18                               ; 12 1
        lddw    .d1     *a0--[2], a17:a16                               ; 12 2
     || lddw    .d2     *b0--[2], b17:b16                               ; 12 3
        lddw    .d1     *a0--[2], a15:a14                               ; 12 4
     || lddw    .d2     *b0--[2], b15:b14                               ; 12 5
        lddw    .d1     *a0--[2], a13:a12                               ; 12 6
     || lddw    .d2     *b0--[2], b13:b12                               ; 12 7

        lddw    .d1     *a0--[2], a11:a10                               ; 13 0
     || lddw    .d2     *b0--[2], b11:b10                               ; 13 1
        lddw    .d1     *a0--[2], a9:a8                                 ; 13 2
     || lddw    .d2     *b0--[2], b9:b8                                 ; 13 3
        lddw    .d1     *a0--[2], a7:a6                                 ; 13 4
     || lddw    .d2     *b0--[2], b7:b6                                 ; 13 5
        lddw    .d1     *a0--[2], a5:a4                                 ; 13 6
     || lddw    .d2     *b0--[2], b5:b4                                 ; 13 7
        
        lddw    .d1     *a0--[2], a3:a2                                 ; 14 0
     || lddw    .d2     *b0--[2], b3:b2                                 ; 14 1
     || b       .s2     nrp                                             ; 14 2
        lddw    .d1     *a0--[2], a1:a0                                 ; 14 3
     || lddw    .d2     *b0--[2], b1:b0                                 ; 14 4
        addk    .s2     8, sp                                           ; 14 5
        nop             2                                               ; 14 6
        nop             1                                               ; 14 7

;-----------------------------------------------------------------------------
;; !: fn: void os_interrupt_trigger_ll()
;; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;; !: d: <b>Описание:</b><br>
;; !: d: <br>
;; !: d: Функция выполняет сохранение контекста текущего процесса, загрузку
;; !: d: контекста для прерывания и вызов соответствующего обработчика. Это
;; !: d: системная функция и она не доступна пользователю.<br>
;; !: d: <br>
;; !: d: <b>Время выполнения:</b><br>
;; !: d: <br>
;; !: d: 54 такта (без учета обработчика прерываний)
;-----------------------------------------------------------------------------
_os_interrupt_trigger_ll__Fv:

        ; Load register context pointer into a0 and b0
        ldw     .d2     *b13, b13                                       ; 0  0
        stdw    .d2     a1:a0, *sp--[1]                                 ; 0  1
     || mvkl    .s1     _v_os_irctx, a0                                 ; 0  2
        stdw    .d2     b1:b0, *sp--[1]                                 ; 0  3
     || mvkh    .s1     _v_os_irctx, a0                                 ; 0  4
        add     .l2     a0, 8, b0                                       ; 0  5
     || add     .s2     a0, 8, b1                                       ; 0  6
     || nop             1                                               ; 0  7

        ; Store a0-a31, b0-b31 and AMR registers
        stdw    .d1     a3:a2, *++a0[2]                                 ; 1  0
     || stdw    .d2     b3:b2, *++b0[2]                                 ; 1  1
     || nop             1                                               ; 1  2
     || nop             1                                               ; 1  3
        stdw    .d1     a5:a4, *++a0[2]                                 ; 1  4
     || stdw    .d2     b5:b4, *++b0[2]                                 ; 1  5
     || add     .l1     b1, 0, a2                                       ; 1  6
     || add     .l2     b1, 0, b2                                       ; 1  7

        stdw    .d1     a7:a6, *++a2[5]                                 ; 2  0
     || stdw    .d2     b7:b6, *++b2[6]                                 ; 2  1
     || nop             1                                               ; 2  2
     || nop             1                                               ; 2  3
        stdw    .d1     a9:a8, *++a2[2]                                 ; 2  4
     || stdw    .d2     b9:b8, *++b2[2]                                 ; 2  5
     || add     .l1     sp, 0, a3                                       ; 2  6
     || add     .l2     sp, 0, b3                                       ; 2  7

        lddw    .d1     *+a3[2], a1:a0                                  ; 3  0
     || lddw    .d2     *+b3[1], b1:b0                                  ; 3  1
     || addk    .s2     16, sp                                          ; 3  2
     || nop             1                                               ; 3  3
        stdw    .d1     a11:a10, *++a2[2]                               ; 3  4
     || stdw    .d2     b11:b10, *++b2[2]                               ; 3  5
        stdw    .d1     a13:a12, *++a2[2]                               ; 3  6
     || stw     .d2     b12, *++b2[4]                                   ; 3  7

        stdw    .d1     a15:a14, *++a2[2]                               ; 4  0
     || stdw    .d2     b15:b14, *++b2[2]                               ; 4  1
     || add     .l1     b1, -8, a3                                      ; 4  2
     || add     .l2     b1, 0, b3                                       ; 4  3
        stdw    .d1     a17:a16, *++a2[2]                               ; 4  4
     || stdw    .d2     b17:b16, *++b2[2]                               ; 4  5
        stdw    .d1     a1:a0, *+a3[0]                                  ; 4  6
     || stdw    .d2     b1:b0, *+b3[0]                                  ; 4  7

        stdw    .d1     a19:a18, *++a2[2]                               ; 5  0
     || stdw    .d2     b19:b18, *++b2[2]                               ; 5  1
     || addk    .s1     256, a3                                         ; 5  2
     || mvc     .s2     amr, b0                                         ; 5  3
        stdw    .d1     a21:a20, *++a2[2]                               ; 5  4
     || stdw    .d2     b21:b20, *++b2[2]                               ; 5  5
     || mvkl    .s1     0, a8                                           ; 5  6
     || mvkl    .s2     _OS_ISTACK_END, b15                             ; 5  7

        stdw    .d1     a23:a22, *++a2[2]                               ; 6  0
     || stdw    .d2     b23:b22, *++b2[2]                               ; 6  1
     || mvkh    .s1     0, a8                                           ; 6  2
     || mvkh    .s2     _OS_ISTACK_END, b15                             ; 6  3
        stdw    .d1     a25:a24, *++a2[2]                               ; 6  4
     || stdw    .d2     b25:b24, *++b2[2]                               ; 6  5
     || mvc     .s2     a8, amr                                         ; 6  6
     || nop             1                                               ; 6  7

        b       .s2     b13                                             ; 7  0
        addkpc  .s2     rl0_05_15_rpoint, b3, 0                         ; 7  1
        stdw    .d1     a27:a26, *++a2[2]                               ; 7  2
     || stdw    .d2     b27:b26, *++b2[2]                               ; 7  3
        stdw    .d1     a29:a28, *++a2[2]                               ; 7  4
     || stdw    .d2     b29:b28, *++b2[2]                               ; 7  5
        stdw    .d1     a31:a30, *++a2[2]                               ; 7  6
     || stdw    .d2     b31:b30, *++b2[2]                               ; 7  7

        stw     .d1     b0, *+a3[0]                                     ; 8  0
     || sub     .d2     b15, 8, b15                                     ; 8  1
     || nop             1                                               ; 8  2
     || nop             1                                               ; 8  3
     || nop             1                                               ; 8  4
     || nop             1                                               ; 8  5
     || nop             1                                               ; 8  6
     || nop             1                                               ; 8  7

rl0_05_15_rpoint:
        
        ; Load register context pointer into a0 and b0
        mvkl    .s1     _v_os_irctx, a0                                 ; 9  0
     || mvkl    .s2     _v_os_irctx, b0                                 ; 9  1
        mvkh    .s1     _v_os_irctx, a0                                 ; 9  2
     || mvkh    .s2     _v_os_irctx, b0                                 ; 9  3
        addk    .s1     240, a0                                         ; 9  4
     || addk    .s2     248, b0                                         ; 9  5
     || nop             1                                               ; 9  6
     || nop             1                                               ; 9  7

        ldw     .d2     *+b0[2], b16                                    ; 10 0
     || nop             1                                               ; 10 1
        lddw    .d1     *a0--[2], a31:a30                               ; 10 2
     || lddw    .d2     *b0--[2], b31:b30                               ; 10 3
        lddw    .d1     *a0--[2], a29:a28                               ; 10 4
     || lddw    .d2     *b0--[2], b29:b28                               ; 10 5
        lddw    .d1     *a0--[2], a27:a26                               ; 10 6
     || lddw    .d2     *b0--[2], b27:b26                               ; 10 7

        lddw    .d1     *a0--[2], a25:a24                               ; 11 0
     || lddw    .d2     *b0--[2], b25:b24                               ; 11 1
        lddw    .d1     *a0--[2], a23:a22                               ; 11 2
     || lddw    .d2     *b0--[2], b23:b22                               ; 11 3
     || mvc     .s2     b16, amr                                        ; 11 4
     || nop             1                                               ; 11 5
        lddw    .d1     *a0--[2], a21:a20                               ; 11 6
     || lddw    .d2     *b0--[2], b21:b20                               ; 11 7

        lddw    .d1     *a0--[2], a19:a18                               ; 12 0
     || lddw    .d2     *b0--[2], b19:b18                               ; 12 1
        lddw    .d1     *a0--[2], a17:a16                               ; 12 2
     || lddw    .d2     *b0--[2], b17:b16                               ; 12 3
        lddw    .d1     *a0--[2], a15:a14                               ; 12 4
     || lddw    .d2     *b0--[2], b15:b14                               ; 12 5
        lddw    .d1     *a0--[2], a13:a12                               ; 12 6
     || ldw     .d2     *b0--[4], b12                                   ; 12 7

        lddw    .d1     *a0--[2], a11:a10                               ; 13 0
     || lddw    .d2     *b0--[2], b11:b10                               ; 13 1
        lddw    .d1     *a0--[2], a9:a8                                 ; 13 2
     || lddw    .d2     *b0--[2], b9:b8                                 ; 13 3
        lddw    .d1     *a0--[2], a7:a6                                 ; 13 4
     || lddw    .d2     *b0--[2], b7:b6                                 ; 13 5
        lddw    .d1     *a0--[2], a5:a4                                 ; 13 6
     || lddw    .d2     *b0--[2], b5:b4                                 ; 13 7
        
        lddw    .d1     *a0--[2], a3:a2                                 ; 14 0
     || lddw    .d2     *b0--[2], b3:b2                                 ; 14 1
        lddw    .d1     *a0--[2], a1:a0                                 ; 14 2
     || lddw    .d2     *b0--[2], b1:b0                                 ; 14 3
     || b       .s2     irp                                             ; 14 4
        ldw     .d2     *+sp[2], b13                                    ; 14 5
        addk    .s2     16, sp                                          ; 14 6
        nop             3                                               ; 14 7

;-----------------------------------------------------------------------------
;; !: fn: void os_interrupt_enable_ll( uint32 state )
;; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;; !: d: <b>Syscall псевдоним:</b><br>
;; !: d: <br>
;; !: d: int_enable<br>
;; !: d: <br>
;; !: d: <b>Описание:</b><br>
;; !: d: <br>
;; !: d: Функция разрешает все прерывания если переменная state равна 1,
;; !: d: иначе функция не изменяет состояние флага глобального запрета
;; !: d: прерываний.<br>
;; !: d: <br>
;; !: d: <b>Время выполнения:</b><br>
;; !: d: <br>
;; !: d: 5 тактов
;-----------------------------------------------------------------------------
_os_interrupt_enable_ll__FUi:

        b       .s2     b3                                              ; 0  1
        and     .d1     1, a4, a1                                       ; 0  2
   [a1] mvc     .s2     csr, b0                                         ; 0  3
   [a1] or      .d2     1, b0, b0                                       ; 0  4
   [a1] mvc     .s2     b0, csr                                         ; 0  5
        nop             1                                               ; 0  6
        nop             1                                               ; 0  7
        nop             1                                               ; 0  8
        
;-----------------------------------------------------------------------------
;; !: fn: uint32 os_interrupt_disable_ll()
;; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;; !: d: <b>Syscall псевдоним:</b><br>
;; !: d: <br>
;; !: d: int_disable<br>
;; !: d: <br>
;; !: d: <b>Описание:</b><br>
;; !: d: <br>
;; !: d: Функция запрещает все прерывания.<br>
;; !: d: <br>
;; !: d: <b>Возвращаемые значения:</b><br>
;; !: d: <br>
;; !: d: Функция возвращает предыдущее состояние флага глобального запрета
;; !: d: прерываний.<br>
;; !: d: <br>
;; !: d: <b>Время выполнения:</b><br>
;; !: d: <br>
;; !: d: 5 тактов
;-----------------------------------------------------------------------------
_os_interrupt_disable_ll__Fv:

        b       .s2     b3                                              ; 0  0
        mvc     .s2     csr, b0                                         ; 0  1
        and     .d1     1, b0, a4                                       ; 0  2
        and     .d2     -2, b0, b0                                      ; 0  3
        mvc     .s2     b0, csr                                         ; 0  4
        nop             1                                               ; 0  5
        nop             1                                               ; 0  6
        nop             1                                               ; 0  7

;-----------------------------------------------------------------------------
;; !: fn: void os_interrupt_lock_ll( uint32 int_number )
;; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;; !: d: <b>Описание:</b><br>
;; !: d: <br>
;; !: d: Функция маскирует прерывание с номером int_number. Это
;; !: d: низкоуровневая функция, и не может быть вызвана напрямую.<br>
;; !: d: <br>
;; !: d: <b>Время выполнения:</b><br>
;; !: d: <br>
;; !: d: 10 тактов
;------------------------------------------------------------------------------
_os_interrupt_lock_ll__FUi:

        b       .s2     l_intl_0                                        ; 0  0
        mvk     .s1     1, a1                                           ; 0  1
        shl     .s1     a1, a4, a0                                      ; 0  2
     || mvc     .s2     csr, b0                                         ; 0  3
        add     .l2     b0, 0, b1                                       ; 0  4
        and     .d2     -2, b0, b0                                      ; 0  6
        mvc     .s2     b0, csr                                         ; 0  7
        nop             1                                               ; 0  7

l_intl_0:

        b       .s2     b3                                              ; 1  0
     || not     .s1     a0, a1                                          ; 1  1
        mvc     .s2     ier, b0                                         ; 1  2
        and     .l1     b0, a1, a0                                      ; 1  3
        or      .l1     a0, 3, a1                                       ; 1  4
        mvc     .s2     a1, ier                                         ; 1  5
        mvc     .s2     b1, csr                                         ; 1  6
        nop             1                                               ; 1  7

;-----------------------------------------------------------------------------
;; !: fn: void os_interrupt_unlock_ll( uint32 int_number )
;; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;; !: d: <b>Описание:</b><br>
;; !: d: <br>
;; !: d: Функция размаскирует прерывание с номером int_number. Это
;; !: d: низкоуровневая функция, и не может быть вызвана напрямую.<br>
;; !: d: <br>
;; !: d: <b>Время выполнения:</b><br>
;; !: d: <br>
;; !: d: 10 тактов
;-----------------------------------------------------------------------------
_os_interrupt_unlock_ll__FUi:

        b       .s2     l_intl_1                                        ; 0  0
        mvk     .s1     1, a1                                           ; 0  1
        shl     .s1     a1, a4, a0                                      ; 0  2
     || mvc     .s2     csr, b0                                         ; 0  3
        add     .l2     b0, 0, b1                                       ; 0  4
        and     .d2     -2, b0, b0                                      ; 0  5
        mvc     .s2     b0, csr                                         ; 0  6
     || or      .s1     a0, 3, a1                                       ; 0  7

l_intl_1:

        b       .s2     b3                                              ; 1  0
        mvc     .s2     ier, b0                                         ; 1  1
        or      .l1     b0, a1, a0                                      ; 1  2
        mvc     .s2     a0, ier                                         ; 1  3
        mvc     .s2     b1, csr                                         ; 1  4
        nop             1                                               ; 1  5
        nop             1                                               ; 1  6
        nop             1                                               ; 1  7

;-----------------------------------------------------------------------------
;; !: fn: void os_interrupt_clear_ll( uint32 int_number )
;; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;; !: d: <b>Описание:</b><br>
;; !: d: <br>
;; !: d: Функция стирает статус прерывания с номером int_number. Это
;; !: d: низкоуровневая функция, и не может быть вызвана напрямую.<br>
;; !: d: <br>
;-----------------------------------------------------------------------------
_os_interrupt_clear_ll__FUi:

        b       .s2     b3                                              ; 0  0
        mvk     .s1     1, a1                                           ; 0  1
        shl     .s1     a1, a4, a0                                      ; 0  2
        mvc     .s2     a0, icr                                         ; 0  3
        nop             1                                               ; 0  4
        nop             1                                               ; 0  5
        nop             1                                               ; 0  6
        nop             1                                               ; 0  7

;-----------------------------------------------------------------------------
;; !: fn: void os_interrupt_set_ll( uint32 int_number )
;; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;; !: d: <b>Описание:</b><br>
;; !: d: <br>
;; !: d: Функция устанавливае статус прерывания с номером int_number. Это
;; !: d: низкоуровневая функция, и не может быть вызвана напрямую.<br>
;; !: d: <br>
;-----------------------------------------------------------------------------
_os_interrupt_set_ll__FUi:

        b       .s2     b3                                              ; 0  0
        mvk     .s1     1, a1                                           ; 0  1
        shl     .s1     a1, a4, a0                                      ; 0  2
        mvc     .s2     a0, isr                                         ; 0  3
        nop             1                                               ; 0  4
        nop             1                                               ; 0  5
        nop             1                                               ; 0  6
        nop             1                                               ; 0  7

;-----------------------------------------------------------------------------
